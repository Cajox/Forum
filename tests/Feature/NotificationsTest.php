<?php

namespace Tests\Feature;

use App\Models\Thread;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Notifications\DatabaseNotification;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class NotificationsTest extends TestCase
{

    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->singIn();
    }

    /** @test */

    function a_notification_is_prepared_when_a_subscribed_thread_receives_a_new_reply_that_is_not_by_the_current_user(){

        $thread = create(Thread::class)->subscribe();

        $user = Auth::user();

        $this->assertCount(0, $user->notifications);

        $thread->addReply([

           'user_id' => Auth::id(),
           'body' => 'Some reply here'

        ]);

        $this->assertCount(0, $user->notifications);

        $thread->addReply([

            'user_id' => create(User::class)->id,
            'body' => 'Some reply here'

        ]);

        $this->assertCount(1, $user->fresh()->notifications);

    }

    /** @test */

    function a_user_can_fetch_their_unread_notifications(){

        create(DatabaseNotification::class);

/*        $thread = create(Thread::class)->subscribe();

        $thread->addReply([

            'user_id' => create(User::class)->id,
            'body' => 'Some reply here'

        ]);*/

        $this->assertCount(1, $this->getJson('/profiles/' . Auth::user()->name . '/notifications/')->json());

    }

    /** @test */

    function a_user_can_mark_a_notification_as_read(){

        create(DatabaseNotification::class);

/*        $thread = create(Thread::class)->subscribe();

        $thread->addReply([

            'user_id' => create(User::class)->id,
            'body' => 'Some reply here'

        ]);*/

        tap(Auth::user(), function ($user){

            $user = Auth::user();

            $this->assertCount(1, $user->unreadNotifications);

            $this->delete('/profiles/' . $user->name . '/notifications/' . $user->unreadNotifications->first()->id);

            $this->assertCount(0, $user->fresh()->unreadNotifications);

        });

    }

}
